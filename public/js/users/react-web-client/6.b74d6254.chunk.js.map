{"version":3,"sources":["global/app.settings.tsx","global/components/Alert.tsx","role-app/reducers/app.reducer.tsx","role-app/crud-handlers/read.tsx","role-app/crud-handlers/update.tsx","role-app/crud-handlers/delete.tsx","role-app/crud-handlers/create.tsx","role-app/components/Role.tsx","role-app/components/RoleListHeader.tsx","role-app/components/RoleList.tsx","role-app/components/AddRole.tsx","role-app/components/EditRole.tsx","role-app/components/ViewRole.tsx","role-app/RoleApp.tsx"],"names":["TenantTeamRole","TenantAccountOfficerRole","DEFAULT_ACTION_BUTTON_STATE","API_VERSION_URL","Alert","message","type","onClickHandler","color","onClick","remove","reducer","state","action","roles","payload","rolesCount","actionButtonState","alert","show","error","onViewRole","onAddRole","onEditRole","role","length","currentRoles","index","findIndex","id","handleReadRoles","dispatch","a","findOptions","fetch","encodeURI","JSON","stringify","response","ok","Error","statusText","json","data","handleUpdateRole","editedRole","method","headers","body","handleDeleteRole","splice","handleCreateRole","roleToCreate","roleCreated","push","Role","appContext","useContext","AppContext","name","description","landlord","className","window","confirm","RoleListHeader","RoleList","props","roleListRows","map","AddRole","useState","setState","onChange","event","currentRole","target","value","onSubmit","preventDefault","placeholder","required","checked","EditRole","initialState","ViewRole","uniqueName","aria-label","React","createContext","RoleApp","useReducer","useEffect","myAlert","Provider"],"mappings":"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","file":"static/js/6.b74d6254.chunk.js","sourcesContent":["export const DEFAULT_ACTION_BUTTON_STATE = 'is-info';\nexport const API_VERSION_URL = '/v1';\n\n\nexport enum TenantTeamRole {\n    A = \"admin\",\n    M = \"marketing\",\n    C = \"content-manager\"\n}\n\nexport enum TenantAccountOfficerRole {\n    M = \"manager\",\n    T = \"tech-support\"\n}","import React from 'react';\nimport { Notification, Button } from 'react-bulma-components';\n\ntype Props = {\n    message: string,\n    type: \"info\" | \"success\" | \"link\" | \"primary\" | \"warning\" | \"danger\" | \"light\" | \"dark\" | \"white\" | \"black\" | undefined,\n    onClickHandler: ()=>void\n    \n}\n\nconst Alert: React.FC<Props> = ({message, type, onClickHandler}) => {\n    //For bulma notification documentation see https://bulma.io/documentation/elements/notification/\n    return(\n        <Notification color={type} onClick={onClickHandler}>\n          {message}\n            <Button remove />\n        </Notification>\n    )\n}\n\nexport default Alert","import { IState, IAction } from '../app.interfaces';\n\nconst reducer = (state: IState, action: IAction) => {\n    //alert(\"reducer called\")\n    switch (action.type) {\n        case 'FetchDataSuccess':\n            return {\n                ...state, roles: action.payload!.roles, rolesCount: action.payload!.rolesCount, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'FetchDataFailure':\n            return {\n                ...state, alert: { show: true, type: 'danger', message: `Could not load remote data: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleViewRole':\n            return {\n                ...state, onViewRole: true, onAddRole: false, onEditRole: false, role: action.payload!.role\n            };\n        case 'HandleCloseViewRole':\n            return{\n                ...state, onViewRole: false, role: null\n            }\n        case 'HandleOnAddRole':\n            return {\n                ...state, onAddRole: true, onEditRole: false, alert: {...state.alert, show: false}\n            };\n        case 'HandleCancelCreate':\n            return {\n                ...state, onAddRole: false\n            };\n        case 'BeforeCreateRole':\n            //goal here is to set alert and/or is-loading button to show creating role message. May be better to simply use is-loading button css\n            return {\n                ...state, alert: { show: true, type: 'info', message: 'Creating role. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'CreateRoleSuccess': \n            //goal here is to update state with role created\n            //React team recommends that state modifications like that shown below should not be in useReducer.\n            //Hence, I had to pass currentState to handleCreateRole and modify the currentState there before passing to reducer\n            //TODO, do the same for Update and Delete\n            /*\n            const currentRoles = state.roles!;\n            \n            currentRoles.push(action.payload!.role!);\n            const newRolesCount = state.rolesCount!++;\n            */\n           \n            return {\n                //...state, roles: currentRoles, rolesCount: newRolesCount, onAddRole: false, alert: { show: true, type: 'success', message: 'Tenant successfully created!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, roles: action.payload!.roles, rolesCount: action.payload!.roles!.length, onAddRole: false, alert: { show: true, type: 'success', message: 'Tenant successfully created!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        \n        case 'CreateRoleFailure':\n            //goal here is to set alert to show failure to create\n            return {\n                ...state, alert: { show: true, type: 'danger', message: `Could not create role: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'BeforeDeleteRole':\n            //goal here is to set alert and/or is-loading button to show deleting role message\n            return { \n                ...state, alert: { show: true, type: 'info', message: 'Deleting role. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'DeleteRoleSuccess':\n            //goal here is to remove deleted role from state\n            /*\n            const currentRoles = state.roles;\n            //find the index corresponding to the role with the passed id\n            const index = currentRoles!.findIndex((role) => role.id === action.payload!.id);\n            currentRoles!.splice(index, 1);\n            //decrement roles count\n            const newRolesCount = state.rolesCount!-- \n            */\n            return { \n                //...state, onViewRole: false, roles: currentRoles, rolesCount: newRolesCount, alert: { show: true, type: 'success', message: 'Role successfully deleted!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, onViewRole: false, roles: action.payload!.roles, rolesCount: action.payload!.roles!.length, alert: { show: true, type: 'success', message: 'Role successfully deleted!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        \n        case 'DeleteRoleFailure':\n            //goal here is to set alert to show failure to delete\n            return { \n                ...state, onViewRole: false, alert: { show: true, type: 'danger', message: `Could not delete role: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'BeforeUpdateRole':\n            //goal here is to set alert to show updating role message\n            return { \n                ...state, alert: { show: true, type: 'info', message: 'Updating role. Please wait!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleCancelUpdate':\n            return { \n                ...state, onEditRole: false \n            };\n        case 'HandleEditRole': {\n            //goal here is to find the tenant to be edited and set the role in state to be edited\n            const currentRoles = state.roles;\n            \n            const index = currentRoles!.findIndex((role) => role.id === action.payload!.id);\n            const role = currentRoles![index];\n            return { \n                ...state, onEditRole: true, role: role, onAddRole: false, alert: {...state.alert, show: false} \n            };\n        };\n        case 'UpdateRoleSuccess':\n            //goal here is to update state with tenant updated\n            /*\n            const currentRoles = state.roles;\n            const index = currentRoles!.findIndex((role) => role.id === action.payload!.role!.id);\n            //now change the value for that role in state\n            currentRoles![index] = action.payload!.role!;\n            */\n            return { \n                //...state, onViewRole: false, roles: currentRoles, role: action.payload!.role!, onEditRole: false, alert: { show: true, type: 'success', message: 'Role successfully updated!' }, actionButtonState: action.payload!.actionButtonState\n                ...state, onViewRole: false, roles: action.payload!.roles, role: action.payload!.role!, onEditRole: false, alert: { show: true, type: 'success', message: 'Role successfully updated!' }, actionButtonState: action.payload!.actionButtonState\n            };\n        \n        case 'UpdateRoleFailure':\n            //goal here is to set alert to show failure to update\n            return { \n                ...state, onViewRole: false, alert: { show: true, type: 'danger', message: `Could not update role: ${action.payload!.error}` }, actionButtonState: action.payload!.actionButtonState\n            };\n        case 'HandleCloseAlert':\n            return { \n                ...state, alert: { show: false, message: '', type: '' } \n            };\n\n        //below are for relations\n        case 'AddUserToRoleSuccess':\n            //replace the role that has been updated with the one returned from server after update.\n            //goal here is to update state with tenant updated\n            const currentRoles = state.roles;\n            const index = currentRoles!.findIndex((role) => role.id === action.payload!.role!.id);\n            //now change the value for that role in state\n            currentRoles![index] = action.payload!.role!;\n            return { \n                ...state, roles: currentRoles, role: action.payload!.role!, alert: { show: true, type: 'success', message: 'User successfully added to role!' }, actionButtonState: action.payload!.actionButtonState\n            };\n            \n        default:\n            return state; //return state as is if the action type indicated is not handled\n    }//close switch statement\n\n}\nexport default reducer;","import { IFindOptions } from \"../../global/app.interfaces\";\nimport { IAction } from \"../app.interfaces\";\n\n//function to fetch data\n//See https://github.com/typeorm/typeorm/blob/master/docs/find-options.md for find options\n//findOptions defaults to empty {}\nexport const handleReadRoles = async (dispatch: React.Dispatch<IAction>, findOptions: IFindOptions = {}) => {\n    try {\n      //Rather than use absolute URL, we are using relative below because we have made a proxy entry into package.json\n      //i.e. \"proxy\": \"http://localhost:3003\". In this way, our code is more like how it will be at production deployment\n      //when we serve both the client react application and the backend from the same domain.\n      const response = await fetch(`/v1/roles?findOptions=${encodeURI(JSON.stringify(findOptions))}`);\n      \n      if (!response.ok) throw new Error(response.statusText);\n\n      const data = await response.json();\n      //set in state  \n      dispatch({type: 'FetchDataSuccess', payload: {rolesCount: data[1], roles: data[0]}})\n    } catch (error) {\n      //set state\n      dispatch({type: 'FetchDataFailure', payload: {error: error}})\n    }\n  };\n","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../global/app.settings\";\nimport { IAction, IRole } from \"../app.interfaces\";\n\nexport const handleUpdateRole = async (editedRole: IRole, currentRoles: IRole[], dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    //Of course, this alert will only flash if it takes very minimal time to create item\n    dispatch({ type: 'BeforeUpdateRole', payload: { actionButtonState: 'is-loading' } })\n    //let's try to write to backend\n    try {\n        const response = await fetch(`/v1/roles`,\n            {\n                method: 'PUT',//notice the method\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(editedRole) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n\n        await response.json();\n        //dispatch to state\n        const index = currentRoles!.findIndex((role) => role.id === editedRole.id);\n        //now change the value for that role in state\n        currentRoles![index] = editedRole!;\n        dispatch({ type: 'UpdateRoleSuccess', payload: { role: editedRole, roles: currentRoles, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    } catch (error) {\n        dispatch({ type: 'UpdateRoleFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    }\n\n}","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../global/app.settings\";\nimport { IAction, IRole } from \"../app.interfaces\";\n\nexport const handleDeleteRole = async (id: number | string, currentRoles: IRole[], dispatch: React.Dispatch<IAction>) => {\n    //You can optionally send an alert at the beginning of this function, in case it takes long to finish.\n    dispatch({ type: 'BeforeDeleteRole', payload: { actionButtonState: 'is-loading' } });\n    try {\n        const response = await fetch(`/v1/roles/${id}`, //note this URL\n            {\n                method: 'DELETE'\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK\n        //Response is ok. Proceed!\n        \n        //remove role from current state received in this function and to be dispatched\n        //find the index corresponding to the role with the passed id\n        const index = currentRoles!.findIndex((role) => role.id === id);\n        currentRoles!.splice(index, 1);\n        //dispatch({ type: 'DeleteRoleSuccess', payload: { id: id, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n        dispatch({ type: 'DeleteRoleSuccess', payload: { id: id, roles: currentRoles, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    } catch (error) {\n        //problem deleting from backend\n        dispatch({ type: 'DeleteRoleFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } })\n    }\n}\n","import { DEFAULT_ACTION_BUTTON_STATE } from \"../../global/app.settings\";\nimport { IAction, IRole } from \"../app.interfaces\";\n\n//function that handles Create Role\nexport const handleCreateRole = async (roleToCreate: IRole, currentRoles: IRole[], dispatch: React.Dispatch<IAction>) => {\n    //dispatch to state reducer, specifying the action type. Just a message that says 'Creating role ...'\n    dispatch({ type: 'BeforeCreateRole', payload: { actionButtonState: 'is-loading' } });\n    //let's try to write to backend\n    try {\n        //I have left a number of init options commented out rather than not have then at, so you can know about them\n        //see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for info on these options\n        const response = await fetch(`/v1/roles`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(roleToCreate) // body data type must match \"Content-Type\" header\n\n            });\n        if (!response.ok) throw new Error(response.statusText);//confirm that response is OK, else throw error\n        //Response is ok. Proceed!\n        const roleCreated: IRole = await response.json();\n\n        //update the current roles before dispatch\n        currentRoles.push(roleCreated);\n        //useReducer to dispatch successful role creation, sending roleCreated as payload.\n        //dispatch({ type: 'CreateRoleSuccess', payload: { role: roleCreated, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n        dispatch({ type: 'CreateRoleSuccess', payload: { roles: currentRoles, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n    } catch (error) {\n        //dispatch error to state for display\n        dispatch({ type: 'CreateRoleFailure', payload: { error: error, actionButtonState: DEFAULT_ACTION_BUTTON_STATE } });\n    }\n}","/** This component is for displaying each item in the record, passed to it from RoleList */\nimport React, { useContext } from 'react';\nimport { IRole } from '../app.interfaces';\nimport { AppContext } from '../RoleApp';\n\ntype Props = {\n    role: IRole,\n}\n\nconst Role: React.FC<Props> = ({role}) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteRole = () => {\n        appContext!.handleDeleteRole!(role.id, appContext!.currentRoles, appContext!.dispatch); ////notice here that we are invoking the handleDeleteRole() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditRole = () => {\n        //appContext!.handleEditRole!(role.id, appContext!.dispatch); //notice here that we are invoking the handleEditRole() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditRole', payload: {id: role.id} });\n    };\n\n    const onViewRole = () => {\n        appContext!.dispatch({type: 'HandleViewRole', payload: {role}})\n    }\n\n    return (\n        <tr>\n            <td>{role.name}</td>\n            <td>{role.description}</td>\n            <td>{role.landlord? 'Yes' : 'No'}</td>\n            <td>\n                \n                <div className=\"buttons are-small\">\n                    <button className=\"button is-link\" onClick={onViewRole}>View Detail</button>\n                    <button className=\"button is-warning\" onClick={onEditRole}>Edit</button>\n                    <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteRole() }}>Delete</button>\n                </div>\n                \n            </td>\n            \n        </tr>\n    );\n}\n\nexport default Role;\n","/** Table header. We are separating this from TenantList just in case it has to carry out\n * some specific tasks like firing sort event based on the header column clicked.\n*/\nimport React from 'react';\n\n\nconst RoleListHeader: React.FC = () => {\n\n  return (\n    <thead>\n      <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Landlord?</th>\n          <th>Action</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default RoleListHeader;\n","import React from 'react';\nimport { IRole } from '../app.interfaces';\nimport Role from './Role';\nimport RoleListHeader from './RoleListHeader';\n\n\n//declare type for Props passed to this \ntype Props = {\n    roles: IRole[],\n}\n\nconst RoleList: React.FC<Props> = (props) => {\n\n    //prepare roles for display in a table\n    let roleListRows:any = null;\n    \n    roleListRows = props.roles.map((role) => {\n        return <Role role={role} key={role.id}/>\n    })\n    \n\n    return (\n        <table className=\"table is-striped is-narrow is-hoverable\" >\n            <caption><h3>Available roles</h3></caption>\n            <RoleListHeader />\n            <tbody>\n                {roleListRows}\n            </tbody>\n        </table>\n    );\n}\n\nexport default RoleList;\n","/** This component is for displaying each role in the record, passed to it from RoleList */\nimport React, { useState } from 'react';\nimport { IAction, IRole } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    handleCreateRole: Function,\n    currentRoles: IRole[],\n    dispatch: React.Dispatch<IAction>\n}\n\ntype IState = {\n    role:  IRole\n}\n\nconst AddRole: React.FC<Props> = (props) => {\n\n    const initialState: IState = {\n        role: {\n            name: '',\n            description: '',\n            landlord: true,\n            //users: []\n        }\n\n    }\n\n    //declare the state variable for role to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [state, setState] = useState<IState>({ ...initialState });\n\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const currentRole = state.role;//check out role in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentRole[target.name] = target.value;\n        setState({ ...state, role: currentRole });//checkin the modified role state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        //alert('about to call handleCreateRole')\n        props.handleCreateRole(state.role, props.currentRoles, props.dispatch);//call the handleAddRole function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelCreate' })\n    }\n\n    const handleLandlordCheckbox = () => {\n        //toggle choice in state\n        const landlord = state.role.landlord? false : true\n        setState({...state, role: {...state.role, landlord} })\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"box\">\n                <div className=\"columns is-mobile\">\n                    <h2>Add Role</h2>\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Name</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"name\" value={state.role.name} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Description</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Description input\" name=\"description\" value={state.role.description} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <div className=\"control\">\n                                    <span><input type=\"checkbox\" name=\"landlord\" value=\"\" checked={state.role.landlord} onChange={handleLandlordCheckbox} />&nbsp;Landlord role?</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"columns is-mobile\">\n                    <div className=\"field is-grouped\">\n                        <div className=\"control\">\n                            <button className=\"button is-link\">Submit</button>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n\n    );\n}\n\nexport default AddRole;\n","/** This component is for displaying each role in the record, passed to it from RoleList */\nimport React, { useState } from 'react';\nimport { IAction, IRole } from '../app.interfaces';\n\n//create the type for the anticipated props to be passed from parent component\ntype Props = {\n    role: IRole,\n    handleUpdateRole: Function,\n    currentRoles: IRole[],\n    dispatch: React.Dispatch<IAction>\n}\n\ntype IState = {\n    role: IRole\n}\n\nconst EditRole: React.FC<Props> = (props) => {\n\n    const initialState: IState = {\n        role: {\n            id: props.role.id,\n            name: props.role.name,\n            description: props.role.description,\n            landlord: props.role.landlord,\n            //users: []\n        }\n\n    }\n\n    //declare the state variable for role to be added from form. Notice that we are using an object containing the individual elements\n    //We need to interact with them individually as state variable that will change in response to input onChange \n    const [state, setState] = useState<IState>({ ...initialState });\n\n\n    //create a general onChange event handler for form inputs that fire onChange event\n    //See https://reactjs.org/docs/events.html? for all kinds of events that can be handled in react\n    const onChange = (event: React.FormEvent) => {\n        const currentRole = state.role;//check out role in state as is\n        //modify element in the state which has the same name as the input that fired this event. Pass the new value\n        const target: HTMLInputElement | HTMLSelectElement = event.target as HTMLInputElement | HTMLSelectElement; //as is used here to cast\n        currentRole[target.name] = target.value;\n        setState({ ...state, role: currentRole });//checkin the modified role state\n    }\n\n    //function to handle form onSubmit event\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();//do not do the default form submit to the server\n        props.handleUpdateRole(state.role, props.currentRoles, props.dispatch);//call the handleUpdateRole function passed via props.\n    }\n\n    //function to handle form onCancel\n    const onCancel = () => {\n        //dispatch to state\n        props.dispatch({ type: 'HandleCancelUpdate' })\n    }\n\n    const handleLandlordCheckbox = () => {\n        //toggle choice in state\n        const landlord = state.role.landlord? false : true\n        setState({...state, role: {...state.role, landlord} })\n    }\n\n    //Note where the above functions are used below within the return statement\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"box\">\n                <div className=\"columns is-mobile\">\n                    <h2>Add Role</h2>\n                </div>\n                <div className=\"columns is-mobile\">\n                    <div className=\"column\">\n                        <div className=\"box\">\n                            <div className=\"field\">\n                                <label className=\"label\">Name</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Name input\" name=\"name\" value={state.role.name} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label className=\"label\">Description</label>\n                                <div className=\"control\">\n                                    <input className=\"input\" type=\"text\" placeholder=\"Description input\" name=\"description\" value={state.role.description} onChange={onChange} required />\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <div className=\"control\">\n                                    <span><input type=\"checkbox\" name=\"landlord\" value=\"\" checked={state.role.landlord} onChange={handleLandlordCheckbox} />&nbsp;Landlord role?</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"columns is-mobile\">\n                    <div className=\"field is-grouped\">\n                        <div className=\"control\">\n                            <button className=\"button is-link\">Submit</button>\n                        </div>\n                        <div className=\"control\">\n                            <button className=\"button is-link is-light\" onClick={onCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n\n    );\n}\n\nexport default EditRole;\n","/** This component is for displaying each item in the record, passed to it from RoleList */\nimport React, { useContext } from 'react';\nimport { IRole } from '../app.interfaces';\nimport { AppContext } from '../RoleApp';\n\ntype Props = {\n    role: IRole,\n}\n\nconst ViewRole: React.FC<Props> = ({ role }) => {\n\n    //declare applicable contexts\n    const appContext = useContext(AppContext);\n\n    //callback function for delete button onClick event. We could have also embedded this function definition directly rather than define it first here\n    const onDeleteRole = () => {\n        appContext!.handleDeleteRole!(role.id, appContext!.dispatch); ////notice here that we are invoking the handleDeleteRole() via appContext. The exclamation mark is because of the possible null which will not really happen\n    };\n\n    //callback function for edit button\n    const onEditRole = () => {\n        //appContext!.handleEditRole!(role.id, appContext!.dispatch); //notice here that we are invoking the handleEditRole() via appContext. The exclamation mark is because of the possible null which will not really happen\n        appContext!.dispatch({ type: 'HandleEditRole', payload: { id: role.id } });\n    };\n\n    const onClickCloseButton = () => {\n        appContext!.dispatch({ type: 'HandleCloseViewRole' })\n    }\n\n    return (\n        <div className=\"modal modal-full-screen modal-fx-fadeInScale is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">{`Details of ${role.uniqueName}`}</p>\n                    <button className=\"delete\" aria-label=\"close\" onClick={onClickCloseButton} />\n                </header>\n                <section className=\"modal-card-body\">\n                    {/*<!-- Content ... -->*/}\n                    <div className=\"columns\">\n                        <div className=\"column is-two-thirds\">\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Name:\n                                </div>\n                                <div className=\"column\">\n                                    {role.name}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Description:\n                                </div>\n                                <div className=\"column\">\n                                    {role.description}\n                                </div>\n                            </div>\n                            <div className=\"columns\">\n                                <div className=\"column is-two-fifths\">\n                                    Landlord role?:\n                                </div>\n                                <div className=\"column\">\n                                    {role.landlord? 'Yes' : 'No'}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <div className=\"buttons are-small\">\n                        <button className=\"button is-warning\" onClick={onEditRole}>Edit</button>\n                        <button className=\"button is-danger\" onClick={() => { if (window.confirm('This action cannot be reversed! Are you sure you want to delete?')) onDeleteRole() }}>Delete</button>\n                    </div>\n                </footer>\n            </div>\n        </div>\n    );\n}\n\nexport default ViewRole;\n","import React, { useEffect, useReducer } from 'react';\nimport { IAction, IRole, IState } from './app.interfaces';\nimport reducer from './reducers/app.reducer';\n\nimport { DEFAULT_ACTION_BUTTON_STATE } from '../global/app.settings';\nimport { IFindOptions } from '../global/app.interfaces';\nimport { handleReadRoles } from './crud-handlers/read';\nimport Alert from '../global/components/Alert';\nimport { handleUpdateRole } from './crud-handlers/update';\nimport { handleDeleteRole } from './crud-handlers/delete';\nimport { handleCreateRole } from './crud-handlers/create';\nimport RoleList from './components/RoleList';\nimport AddRole from './components/AddRole';\nimport EditRole from './components/EditRole';\nimport ViewRole from './components/ViewRole';\n\n/*Below is type definition for our context type.*/\n//Restricts Context type to null or Object containing functions; null is used only for initialization of context in App.\n//Using Object because we have two or more parameters to pass and we want to carry them together within one context instead of two\n//different ones.\ntype AppContextType = null | { dispatch: React.Dispatch<IAction>, handleDeleteRole: Function, currentRoles: IRole[] };\n\n//create a context to be used to pass handlers like delete, edit handlers to subcomponents.\n//We are also going to pass dispatch returned by useReducer.\nexport const AppContext = React.createContext<AppContextType>(null);\n\n/*Let us define type for our reducer so that we can easily pass any type of previous state and action.\nReducer is simply a type of function that takes previous state and action and returns a new state as represented\nWe don't have to do this. But it is good to know.*/\ntype Reducer<S, A> = (prevState: S, action: A) => S;\n\nconst RoleApp: React.FC<IState> = (props) => {//assuming that props passed will be initial state values\n\n  /*let us organize state, using useReducer*/\n  //Prepare initial state values\n  const initialState: IState =\n  {\n    roles: [],\n    rolesCount: 0, //for total number that corresponds to present find, in case of pagination\n    role: null, //This can be used for role to edit or role to view, depending on the function being carried out\n    onAddRole: false,\n    onViewRole: false,\n    onEditRole: false,\n    alert: {\n        show: false,\n        message: '',\n        type: '' \n    },\n    actionButtonState: DEFAULT_ACTION_BUTTON_STATE\n  };\n\n  //using useReducer instead of useState\n  const [state, dispatch] = useReducer<Reducer<IState, IAction>>(reducer, initialState);\n\n  /*Additional handler functions here*/\n  //Below is called by Alert component.\n  const handleCloseAlert = () => {\n    dispatch({ type: 'HandleCloseAlert' });\n  }\n\n  //let findOptions: IFindOptions = {}\n  let findOptions: IFindOptions = {\"relations\":[\"users\"]};\n  /**\n   * useEffect to be run once, hence the second parameter []. Loads data at componentDidMount life cycle stage\n   */\n  useEffect(() => {\n    handleReadRoles(dispatch, findOptions);\n    // eslint-disable-next-line\n  }, []);\n\n  /*Time to logically decide what to show.*/\n  //Setup alert component as a variable so we don't keep repeating\n  const myAlert = (\n    <Alert type={state.alert.type} message={state.alert.message} onClickHandler={handleCloseAlert} />\n  )\n\n  //check if editRole should be loaded or not since it is conditional loading\n  if (state.onEditRole && state.role !== null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <EditRole role={state.role!} handleUpdateRole={handleUpdateRole} currentRoles={state.roles!} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteRole, currentRoles: state.roles! }}>\n              <RoleList roles={state.roles!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onAddRole) {//Display AddRole along with RoleList if onAddRole is true\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AddRole handleCreateRole={handleCreateRole} currentRoles={state.roles!} dispatch={dispatch} />\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteRole, currentRoles: state.roles! }}>\n              <RoleList roles={state.roles!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (state.onViewRole && state.role != null) {\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <AppContext.Provider value={{dispatch, handleDeleteRole, currentRoles: state.roles! }}>\n              <ViewRole role={state.role!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  } else {//onAddRole is false\n    return (\n      <div className=\"container \">\n        <div className=\"content is-medium\">\n          <p>\n            <button className=\"button is-outline\" onClick={() => { dispatch({ type: 'HandleOnAddRole' }) }}>+ Add Role</button>\n          </p>\n          <p>\n            {state.alert.show && myAlert}\n          </p>\n          <p>\n            <AppContext.Provider value={{ dispatch, handleDeleteRole, currentRoles: state.roles! }}>\n              <RoleList roles={state.roles!} />\n            </AppContext.Provider>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default RoleApp;\n"],"sourceRoot":""}